// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for Clerk authentication
model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique
  email         String   @unique
  firstName     String?
  lastName      String?
  phone         String?
  preferences   Json?    // User preferences like notification settings
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  customers     Customer[]
  bookings      Booking[]
  savedDogs     SavedDog[]
  bookingViews  BookingView[]
  
  @@map("users")
}

model Customer {
  id              String   @id @default(cuid())
  userId          String?  // Optional - for guest bookings
  email           String   @unique
  firstName       String
  lastName        String?
  phone           String
  address         String
  city            String
  postalCode      String
  emergencyName   String
  emergencyPhone  String
  emergencyRelation String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User?    @relation(fields: [userId], references: [id])
  dogs            Dog[]
  bookings        Booking[]
  
  @@map("customers")
}

model Dog {
  id                String   @id @default(cuid())
  customerId        String
  name              String
  age               Int
  sex               String
  breed             String
  vaccinated        String
  neutered          String
  vetClinic         String?
  vetPhone          String?
  medications       String?
  medicalConditions String?
  crateTrained      String
  socialLevel       String
  peopleBehavior    String
  behavioralIssues  String
  farmAnimalReactive String
  biteHistory       String
  additionalNotes   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  customer          Customer @relation(fields: [customerId], references: [id])
  bookings          Booking[]
  savedByUsers      SavedDog[]
  files             DogFile[]
  
  @@map("dogs")
}

model Booking {
  id                  String   @id @default(cuid())
  customerId          String
  dogId               String
  userId              String?  // Link to authenticated user
  checkIn             DateTime
  checkOut            DateTime
  boardingType        String   @default("standard")
  services            String[]
  totalDays           Int
  dailyRate           Decimal  @db.Decimal(10, 2)
  serviceCharges      Decimal  @db.Decimal(10, 2) @default(0)
  totalPrice          Decimal  @db.Decimal(10, 2)
  
  // Enhanced pricing fields
  baseDailyRate       Decimal  @db.Decimal(10, 2) @default(0)
  peakSurcharge       Decimal  @db.Decimal(10, 2) @default(0)
  dogSurcharges       Decimal  @db.Decimal(10, 2) @default(0)
  isPeakPeriod        Boolean  @default(false)
  peakPeriodName      String?
  selectedServices    Json?    // Store selected additional services
  
  // Deposit payment fields
  depositAmount       Decimal  @db.Decimal(10, 2) @default(0)
  balanceAmount       Decimal  @db.Decimal(10, 2) @default(0)
  depositPaid         Boolean  @default(false)
  balancePaid         Boolean  @default(false)
  depositInvoiceId    String?
  balanceInvoiceId    String?
  balanceDueDate      DateTime?
  
  specialNotes        String?
  invoiceId           String?  // Legacy field - keeping for compatibility
  xeroInvoiceId       String?  // Legacy field - keeping for compatibility
  status              String   @default("pending")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  customer            Customer @relation(fields: [customerId], references: [id])
  dog                 Dog      @relation(fields: [dogId], references: [id])
  user                User?    @relation(fields: [userId], references: [id])
  bookingViews        BookingView[]
  
  @@map("bookings")
}

// Enhanced pricing system models
model PricingTier {
  id              String  @id @default(cuid())
  name            String  @unique // "short_stay", "standard_stay", "long_stay"
  minDays         Int     // Minimum days for this tier
  maxDays         Int?    // Maximum days (null for unlimited)
  dailyRate       Decimal @db.Decimal(10, 2)
  description     String
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("pricing_tiers")
}

model PeakPeriod {
  id              String   @id @default(cuid())
  name            String   // "New Year", "Easter", "Christmas", etc.
  startDate       DateTime
  endDate         DateTime
  surchargePercent Decimal @db.Decimal(5, 2) // e.g., 20.00 for 20%
  minDays         Int?     // Minimum stay requirement (e.g., 7 for Christmas)
  year            Int      // 2025, 2026, etc.
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("peak_periods")
}

model ServiceCategory {
  id              String  @id @default(cuid())
  name            String  @unique // "grooming", "training", "walks", "food"
  description     String?
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  services        Service[]
  
  @@map("service_categories")
}

model Service {
  id              String  @id @default(cuid())
  categoryId      String
  name            String  // "Full Wash & Conditioner", "Recall Training", etc.
  price           Decimal @db.Decimal(10, 2)
  unit            String  // "per_service", "per_day", "per_meal", "per_walk"
  description     String?
  requiresPrereq  Boolean @default(false) // Does this service require a prerequisite?
  prerequisiteId  String? // ID of the prerequisite service
  xeroItemCode    String? // Xero item code for invoicing
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  category        ServiceCategory @relation(fields: [categoryId], references: [id])
  prerequisite    Service? @relation("ServicePrerequisite", fields: [prerequisiteId], references: [id])
  dependentServices Service[] @relation("ServicePrerequisite")
  
  @@map("services")
}

model DogSurcharge {
  id              String  @id @default(cuid())
  condition       String  @unique // "entire_dog", "large_breed", etc.
  dailyRate       Decimal @db.Decimal(10, 2)
  description     String
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("dog_surcharges")
}

// Legacy model - keeping for backward compatibility
model PricingRule {
  id              String  @id @default(cuid())
  boardingType    String  @unique
  dailyRate       Decimal @db.Decimal(10, 2)
  description     String?
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("pricing_rules")
}

model XeroToken {
  id              String   @id @default(cuid())
  accessToken     String
  refreshToken    String
  tokenType       String   @default("Bearer")
  expiresAt       DateTime
  tenantId        String?
  tenantType      String?
  tenantName      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("xero_tokens")
}

// SavedDog model for user dashboard quick rebooking
model SavedDog {
  id            String   @id @default(cuid())
  userId        String
  dogId         String
  isDefault     Boolean  @default(false)
  nickname      String?  // User-defined nickname for the dog
  notes         String?  // User's personal notes about the dog
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id])
  dog           Dog      @relation(fields: [dogId], references: [id])
  
  @@unique([userId, dogId])
  @@map("saved_dogs")
}

// BookingView model for user dashboard interaction tracking
model BookingView {
  id            String   @id @default(cuid())
  bookingId     String
  userId        String
  lastViewed    DateTime @default(now())
  isFavorite    Boolean  @default(false)
  isArchived    Boolean  @default(false)
  userNotes     String?  // User's personal notes about this booking
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  booking       Booking  @relation(fields: [bookingId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, bookingId])
  @@map("booking_views")
}

// DogFile model for storing uploaded files related to dogs
model DogFile {
  id              String   @id @default(cuid())
  dogId           String
  fileName        String   // Original filename
  storedFileName  String   // Unique filename on disk
  filePath        String   // Full path to file
  fileType        String   // MIME type
  fileSize        Int      // Size in bytes
  fileCategory    String   // "photo", "vaccination", "vet_record", "other"
  description     String?  // User description of the file
  uploadedBy      String?  // User ID who uploaded
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  dog             Dog      @relation(fields: [dogId], references: [id], onDelete: Cascade)
  
  @@map("dog_files")
}